	Tecnicas de analise de algoritmos sao consideradas partes integrantes do processo moderno de resolucao de problemas, permitindo escolher, de forma racional, um dentre varios algoritmos para uma determinada aplicacao. Se a mesma medida de custo e aplicada a diferentes algoritmos, então e possivel compara-los e escolher o mais adequado para resolver o problema em questao. 
	Para medir o custo de execucao de um algoritmo costuma-se definir uma funcao custo ou funcao de complexidade f, onde f(n) e a medida do tempo necessario para executar o algoritmo para um problema de tamanho n. A funcao f e chamada funcao de complexidade de tempo do algoritmo. Se f(n) e a medida da quantidade de memoria necessaria para executar o algoritmo, entao f e chamada funcao de complexidade de espaco do algoritmo. 
	A medida do custo de execucao de um algoritmo depende principalmente do tamanho da entrada de dados. Por isso, e comum considerar o tempo de execucao de um programa como funcao do tamanho da entrada.  Entretanto, para alguns algoritmos, o custo e uma função da entrada particular de dados, nao apenas do tamanho, pois, por exemplo, para um algoritmo de ordenacao, se os dados ja estiverem quase ordenados, entao o algoritmo trabalhara menos. 
	E necessario, entao, distinguir tres cenarios: melhor caso, pior caso e caso medio. O melhor caso corresponde ao menor tempo de execucao sobre todas as entradas possiveis de tamanho n. O pior caso corresponde ao maior tempo de execucao sobre todas as entradas possiveis de tamanho n. Se f e uma funcao de complexidade baseada no pior caso, entao o custo de executar o algoritmo para uma entrada de tamanho n nunca e maior do que f(n). Tecnicas de analise de algoritmos sao consideradas partes integrantes do processo moderno de resolucao de problemas, permitindo escolher, de forma racional, um dentre varios algoritmos para uma determinada aplicacao. Se a mesma medida de custo e aplicada a diferentes algoritmos, então e possivel compara-los e escolher o mais adequado para resolver o problema em questao. 
	Tecnicas de analise de algoritmos sao consideradas partes integrantes do processo moderno de resolucao de problemas, permitindo escolher, de forma racional, um dentre varios algoritmos para uma determinada aplicacao. Se a mesma medida de custo e aplicada a diferentes algoritmos, então e possivel compara-los e escolher o mais adequado para resolver o problema em questao. 
	Para medir o custo de execucao de um algoritmo costuma-se definir uma funcao custo ou funcao de complexidade f, onde f(n) e a medida do tempo necessario para executar o algoritmo para um problema de tamanho n. A funcao f e chamada funcao de complexidade de tempo do algoritmo. Se f(n) e a medida da quantidade de memoria necessaria para executar o algoritmo, entao f e chamada funcao de complexidade de espaco do algoritmo. 
	Para medir o custo de execucao de um algoritmo costuma-se definir uma funcao custo ou funcao de complexidade f, onde f(n) e a medida do tempo necessario para executar o algoritmo para um problema de tamanho n. A funcao f e chamada funcao de complexidade de tempo do algoritmo. Se f(n) e a medida da quantidade de memoria necessaria para executar o algoritmo, entao f e chamada funcao de complexidade de espaco do algoritmo. 	E necessario, entao, distinguir tres cenarios: melhor caso, pior caso e caso medio. O melhor caso corresponde ao menor tempo de execucao sobre todas as entradas possiveis de tamanho n. O pior caso corresponde ao maior tempo de execucao sobre todas as entradas possiveis de tamanho n. Se f e uma funcao de complexidade baseada no pior caso, entao o custo de executar o algoritmo para uma entrada de tamanho n nunca e maior do que f(n).	A medida do custo de execucao de um algoritmo depende principalmente do tamanho da entrada de dados. Por isso, e comum considerar o tempo de execucao de um programa como funcao do tamanho da entrada.  Entretanto, para alguns algoritmos, o custo e uma função da entrada particular de dados, nao apenas do tamanho, pois, por exemplo, para um algoritmo de ordenacao, se os dados ja estiverem quase ordenados, entao o algoritmo trabalhara menos. 
	E necessario, entao, distinguir tres cenarios: melhor caso, pior caso e caso medio. O melhor caso corresponde ao menor tempo de execucao sobre todas as entradas possiveis de tamanho n. O pior caso corresponde ao maior tempo de execucao sobre todas as entradas possiveis de tamanho n. Se f e uma funcao de complexidade baseada no pior caso, entao o custo de executar o algoritmo para uma entrada de tamanho n nunca e maior do que f(n).
	Para medir o custo de execucao de um algoritmo costuma-se definir uma funcao custo ou funcao de complexidade f, onde f(n) e a medida do tempo necessario para executar o algoritmo para um problema de tamanho n. A funcao f e chamada funcao de complexidade de tempo do algoritmo. Se f(n) e a medida da quantidade de memoria necessaria para executar o algoritmo, entao f e chamada funcao de complexidade de espaco do algoritmo. 	E necessario, entao, distinguir tres cenarios: melhor caso, pior caso e caso medio. O melhor caso corresponde ao menor tempo de execucao sobre todas as entradas possiveis de tamanho n. O pior caso corresponde ao maior tempo de execucao sobre todas as entradas possiveis de tamanho n. Se f e uma funcao de complexidade baseada no pior caso, entao o custo de executar o algoritmo para uma entrada de tamanho n nunca e maior do que f(n).	A medida do custo de execucao de um algoritmo depende principalmente do tamanho da entrada de dados. Por isso, e comum considerar o tempo de execucao de um programa como funcao do tamanho da entrada.  Entretanto, para alguns algoritmos, o custo e uma função da entrada particular de dados, nao apenas do tamanho, pois, por exemplo, para um algoritmo de ordenacao, se os dados ja estiverem quase ordenados, entao o algoritmo trabalhara menos. 	Para medir o custo de execucao de um algoritmo costuma-se definir uma funcao custo ou funcao de complexidade f, onde f(n) e a medida do tempo necessario para executar o algoritmo para um problema de tamanho n. A funcao f e chamada funcao de complexidade de tempo do algoritmo. Se f(n) e a medida da quantidade de memoria necessaria para executar o algoritmo, entao f e chamada funcao de complexidade de espaco do algoritmo. 	E necessario, entao, distinguir tres cenarios: melhor caso, pior caso e caso medio. O melhor caso corresponde ao menor tempo de execucao sobre todas as entradas possiveis de tamanho n. O pior caso corresponde ao maior tempo de execucao sobre todas as entradas possiveis de tamanho n. Se f e uma funcao de complexidade baseada no pior caso, entao o custo de executar o algoritmo para uma entrada de tamanho n nunca e maior do que f(n).	A medida do custo de execucao de um algoritmo depende principalmente do tamanho da entrada de dados. Por isso, e comum considerar o tempo de execucao de um programa como funcao do tamanho da entrada.  Entretanto, para alguns algoritmos, o custo e uma função da entrada particular de dados, nao apenas do tamanho, pois, por exemplo, para um algoritmo de ordenacao, se os dados ja estiverem quase ordenados, entao o algoritmo trabalhara menos. 	Para medir o custo de execucao de um algoritmo costuma-se definir uma funcao custo ou funcao de complexidade f, onde f(n) e a medida do tempo necessario para executar o algoritmo para um problema de tamanho n. A funcao f e chamada funcao de complexidade de tempo do algoritmo. Se f(n) e a medida da quantidade de memoria necessaria para executar o algoritmo, entao f e chamada funcao de complexidade de espaco do algoritmo. 	E necessario, entao, distinguir tres cenarios: melhor caso, pior caso e caso medio. O melhor caso corresponde ao menor tempo de execucao sobre todas as entradas possiveis de tamanho n. O pior caso corresponde ao maior tempo de execucao sobre todas as entradas possiveis de tamanho n. Se f e uma funcao de complexidade baseada no pior caso, entao o custo de executar o algoritmo para uma entrada de tamanho n nunca e maior do que f(n).	A medida do custo de execucao de um algoritmo depende principalmente do tamanho da entrada de dados. Por isso, e comum considerar o tempo de execucao de um programa como funcao do tamanho da entrada.  Entretanto, para alguns algoritmos, o custo e uma função da entrada particular de dados, nao apenas do tamanho, pois, por exemplo, para um algoritmo de ordenacao, se os dados ja estiverem quase ordenados, entao o algoritmo trabalhara menos. 
	Para medir o custo de execucao de um algoritmo costuma-se definir uma funcao custo ou funcao de complexidade f, onde f(n) e a medida do tempo necessario para executar o algoritmo para um problema de tamanho n. A funcao f e chamada funcao de complexidade de tempo do algoritmo. Se f(n) e a medida da quantidade de memoria necessaria para executar o algoritmo, entao f e chamada funcao de complexidade de espaco do algoritmo. 	E necessario, entao, distinguir tres cenarios: melhor caso, pior caso e caso medio. O melhor caso corresponde ao menor tempo de execucao sobre todas as entradas possiveis de tamanho n. O pior caso corresponde ao maior tempo de execucao sobre todas as entradas possiveis de tamanho n. Se f e uma funcao de complexidade baseada no pior caso, entao o custo de executar o algoritmo para uma entrada de tamanho n nunca e maior do que f(n).	A medida do custo de execucao de um algoritmo depende principalmente do tamanho da entrada de dados. Por isso, e comum considerar o tempo de execucao de um programa como funcao do tamanho da entrada.  Entretanto, para alguns algoritmos, o custo e uma função da entrada particular de dados, nao apenas do tamanho, pois, por exemplo, para um algoritmo de ordenacao, se os dados ja estiverem quase ordenados, entao o algoritmo trabalhara menos. 
	Tecnicas de analise de algoritmos sao consideradas partes integrantes do processo moderno de resolucao de problemas, permitindo escolher, de forma racional, um dentre varios algoritmos para uma determinada aplicacao. Se a mesma medida de custo e aplicada a diferentes algoritmos, então e possivel compara-los e escolher o mais adequado para resolver o problema em questao. 
	Para medir o custo de execucao de um algoritmo costuma-se definir uma funcao custo ou funcao de complexidade f, onde f(n) e a medida do tempo necessario para executar o algoritmo para um problema de tamanho n. A funcao f e chamada funcao de complexidade de tempo do algoritmo. Se f(n) e a medida da quantidade de memoria necessaria para executar o algoritmo, entao f e chamada funcao de complexidade de espaco do algoritmo. 
	A medida do custo de execucao de um algoritmo depende principalmente do tamanho da entrada de dados. Por isso, e comum considerar o tempo de execucao de um programa como funcao do tamanho da entrada.  Entretanto, para alguns algoritmos, o custo e uma função da entrada particular de dados, nao apenas do tamanho, pois, por exemplo, para um algoritmo de ordenacao, se os dados ja estiverem quase ordenados, entao o algoritmo trabalhara menos. 
	E necessario, entao, distinguir tres cenarios: melhor caso, pior caso e caso medio. O melhor caso corresponde ao menor tempo de execucao sobre todas as entradas possiveis de tamanho n. O pior caso corresponde ao maior tempo de execucao sobre todas as entradas possiveis de tamanho n. Se f e uma funcao de complexidade baseada no pior caso, entao o custo de executar o algoritmo para uma entrada de tamanho n nunca e maior do que f(n). Tecnicas de analise de algoritmos sao consideradas partes integrantes do processo moderno de resolucao de problemas, permitindo escolher, de forma racional, um dentre varios algoritmos para uma determinada aplicacao. Se a mesma medida de custo e aplicada a diferentes algoritmos, então e possivel compara-los e escolher o mais adequado para resolver o problema em questao. 
	Tecnicas de analise de algoritmos sao consideradas partes integrantes do processo moderno de resolucao de problemas, permitindo escolher, de forma racional, um dentre varios algoritmos para uma determinada aplicacao. Se a mesma medida de custo e aplicada a diferentes algoritmos, então e possivel compara-los e escolher o mais adequado para resolver o problema em questao. 
	Para medir o custo de execucao de um algoritmo costuma-se definir uma funcao custo ou funcao de complexidade f, onde f(n) e a medida do tempo necessario para executar o algoritmo para um problema de tamanho n. A funcao f e chamada funcao de complexidade de tempo do algoritmo. Se f(n) e a medida da quantidade de memoria necessaria para executar o algoritmo, entao f e chamada funcao de complexidade de espaco do algoritmo. 
	Para medir o custo de execucao de um algoritmo costuma-se definir uma funcao custo ou funcao de complexidade f, onde f(n) e a medida do tempo necessario para executar o algoritmo para um problema de tamanho n. A funcao f e chamada funcao de complexidade de tempo do algoritmo. Se f(n) e a medida da quantidade de memoria necessaria para executar o algoritmo, entao f e chamada funcao de complexidade de espaco do algoritmo. 	E necessario, entao, distinguir tres cenarios: melhor caso, pior caso e caso medio. O melhor caso corresponde ao menor tempo de execucao sobre todas as entradas possiveis de tamanho n. O pior caso corresponde ao maior tempo de execucao sobre todas as entradas possiveis de tamanho n. Se f e uma funcao de complexidade baseada no pior caso, entao o custo de executar o algoritmo para uma entrada de tamanho n nunca e maior do que f(n).	A medida do custo de execucao de um algoritmo depende principalmente do tamanho da entrada de dados. Por isso, e comum considerar o tempo de execucao de um programa como funcao do tamanho da entrada.  Entretanto, para alguns algoritmos, o custo e uma função da entrada particular de dados, nao apenas do tamanho, pois, por exemplo, para um algoritmo de ordenacao, se os dados ja estiverem quase ordenados, entao o algoritmo trabalhara menos. 
	E necessario, entao, distinguir tres cenarios: melhor caso, pior caso e caso medio. O melhor caso corresponde ao menor tempo de execucao sobre todas as entradas possiveis de tamanho n. O pior caso corresponde ao maior tempo de execucao sobre todas as entradas possiveis de tamanho n. Se f e uma funcao de complexidade baseada no pior caso, entao o custo de executar o algoritmo para uma entrada de tamanho n nunca e maior do que f(n).
	Para medir o custo de execucao de um algoritmo costuma-se definir uma funcao custo ou funcao de complexidade f, onde f(n) e a medida do tempo necessario para executar o algoritmo para um problema de tamanho n. A funcao f e chamada funcao de complexidade de tempo do algoritmo. Se f(n) e a medida da quantidade de memoria necessaria para executar o algoritmo, entao f e chamada funcao de complexidade de espaco do algoritmo. 	E necessario, entao, distinguir tres cenarios: melhor caso, pior caso e caso medio. O melhor caso corresponde ao menor tempo de execucao sobre todas as entradas possiveis de tamanho n. O pior caso corresponde ao maior tempo de execucao sobre todas as entradas possiveis de tamanho n. Se f e uma funcao de complexidade baseada no pior caso, entao o custo de executar o algoritmo para uma entrada de tamanho n nunca e maior do que f(n).	A medida do custo de execucao de um algoritmo depende principalmente do tamanho da entrada de dados. Por isso, e comum considerar o tempo de execucao de um programa como funcao do tamanho da entrada.  Entretanto, para alguns algoritmos, o custo e uma função da entrada particular de dados, nao apenas do tamanho, pois, por exemplo, para um algoritmo de ordenacao, se os dados ja estiverem quase ordenados, entao o algoritmo trabalhara menos. 	Para medir o custo de execucao de um algoritmo costuma-se definir uma funcao custo ou funcao de complexidade f, onde f(n) e a medida do tempo necessario para executar o algoritmo para um problema de tamanho n. A funcao f e chamada funcao de complexidade de tempo do algoritmo. Se f(n) e a medida da quantidade de memoria necessaria para executar o algoritmo, entao f e chamada funcao de complexidade de espaco do algoritmo. 	E necessario, entao, distinguir tres cenarios: melhor caso, pior caso e caso medio. O melhor caso corresponde ao menor tempo de execucao sobre todas as entradas possiveis de tamanho n. O pior caso corresponde ao maior tempo de execucao sobre todas as entradas possiveis de tamanho n. Se f e uma funcao de complexidade baseada no pior caso, entao o custo de executar o algoritmo para uma entrada de tamanho n nunca e maior do que f(n).	A medida do custo de execucao de um algoritmo depende principalmente do tamanho da entrada de dados. Por isso, e comum considerar o tempo de execucao de um programa como funcao do tamanho da entrada.  Entretanto, para alguns algoritmos, o custo e uma função da entrada particular de dados, nao apenas do tamanho, pois, por exemplo, para um algoritmo de ordenacao, se os dados ja estiverem quase ordenados, entao o algoritmo trabalhara menos. 	Para medir o custo de execucao de um algoritmo costuma-se definir uma funcao custo ou funcao de complexidade f, onde f(n) e a medida do tempo necessario para executar o algoritmo para um problema de tamanho n. A funcao f e chamada funcao de complexidade de tempo do algoritmo. Se f(n) e a medida da quantidade de memoria necessaria para executar o algoritmo, entao f e chamada funcao de complexidade de espaco do algoritmo. 	E necessario, entao, distinguir tres cenarios: melhor caso, pior caso e caso medio. O melhor caso corresponde ao menor tempo de execucao sobre todas as entradas possiveis de tamanho n. O pior caso corresponde ao maior tempo de execucao sobre todas as entradas possiveis de tamanho n. Se f e uma funcao de complexidade baseada no pior caso, entao o custo de executar o algoritmo para uma entrada de tamanho n nunca e maior do que f(n).	A medida do custo de execucao de um algoritmo depende principalmente do tamanho da entrada de dados. Por isso, e comum considerar o tempo de execucao de um programa como funcao do tamanho da entrada.  Entretanto, para alguns algoritmos, o custo e uma função da entrada particular de dados, nao apenas do tamanho, pois, por exemplo, para um algoritmo de ordenacao, se os dados ja estiverem quase ordenados, entao o algoritmo trabalhara menos. 
	Para medir o custo de execucao de um algoritmo costuma-se definir uma funcao custo ou funcao de complexidade f, onde f(n) e a medida do tempo necessario para executar o algoritmo para um problema de tamanho n. A funcao f e chamada funcao de complexidade de tempo do algoritmo. Se f(n) e a medida da quantidade de memoria necessaria para executar o algoritmo, entao f e chamada funcao de complexidade de espaco do algoritmo. 	E necessario, entao, distinguir tres cenarios: melhor caso, pior caso e caso medio. O melhor caso corresponde ao menor tempo de execucao sobre todas as entradas possiveis de tamanho n. O pior caso corresponde ao maior tempo de execucao sobre todas as entradas possiveis de tamanho n. Se f e uma funcao de complexidade baseada no pior caso, entao o custo de executar o algoritmo para uma entrada de tamanho n nunca e maior do que f(n).	A medida do custo de execucao de um algoritmo depende principalmente do tamanho da entrada de dados. Por isso, e comum considerar o tempo de execucao de um programa como funcao do tamanho da entrada.  Entretanto, para alguns algoritmos, o custo e uma função da entrada particular de dados, nao apenas do tamanho, pois, por exemplo, para um algoritmo de ordenacao, se os dados ja estiverem quase ordenados, entao o algoritmo trabalhara menos. 



